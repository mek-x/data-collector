image: golang:1.21

stages:
  - test
  - build
  - deploy

test:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race -coverprofile=coverage.txt -covermode atomic $(go list ./... | grep -v /vendor/)
    - go get github.com/boumenot/gocover-cobertura
    - go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml
    - go tool cover -func=coverage.txt
  coverage: /^total:\s+\(statements\)\s+(\d+.\d+\%)/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

compile:
  stage: build
  script:
    - mkdir -p BUILD
    - go build -o BUILD ./...
  artifacts:
    paths:
      - BUILD

deploy:
  stage: deploy
  before_script:
    - go install github.com/google/ko@latest
    - ko login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag="$CI_COMMIT_REF_NAME"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - KO_DOCKER_REPO=$CI_REGISTRY_IMAGE VERSION=${tag} ko build --bare --tags ${tag},latest --platform=linux/amd64,linux/arm64 ./cmd/collector/
    - KO_DOCKER_REPO=$CI_REGISTRY_IMAGE VERSION=${tag} ko build --bare --tags ${tag}-amd64 --platform=linux/amd64 ./cmd/collector/
    - KO_DOCKER_REPO=$CI_REGISTRY_IMAGE VERSION=${tag} ko build --bare --tags ${tag}-aarch64 --platform=linux/arm64 ./cmd/collector/
  rules:
    - if: $CI_COMMIT_TAG != null
    - if: $CI_PIPELINE_SOURCE == "web"

